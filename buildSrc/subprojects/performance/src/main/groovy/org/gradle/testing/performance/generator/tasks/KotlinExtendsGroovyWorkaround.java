/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.testing.performance.generator.tasks;

import groovy.lang.MetaClass;

/**
 * By default, the bytecode generated by Groovy compiler contains synthetic methods, which can't be
 * recognized by kotlin compiler - this means if you try to extend a Groovy class with Kotlin directly,
 * the Kotlin compiler will complain:
 *
 * class X is not abstract and does not implement abstract base class member public abstract fun invokeMethod(p0: String!, p1: Any!): Any! defined in GroovyBase
 *
 * This class acts as a workaround, or a "bridge" class between Kotlin and Groovy.
 *
 * See https://youtrack.jetbrains.com/issue/KT-27998
 */
public class KotlinExtendsGroovyWorkaround extends CheckoutRemoteProjectTask {
    @Override
    public Object invokeMethod(String s, Object o) {
        return super.invokeMethod(s, o);
    }

    @Override
    public Object getProperty(String s) {
        return super.getProperty(s);
    }

    @Override
    public void setProperty(String s, Object o) {
        super.setProperty(s, o);
    }

    @Override
    public MetaClass getMetaClass() {
        return super.getMetaClass();
    }

    @Override
    public void setMetaClass(MetaClass metaClass) {
        super.setMetaClass(metaClass);
    }
}
